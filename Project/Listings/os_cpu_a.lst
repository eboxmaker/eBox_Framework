


ARM Macro Assembler    Page 1 


    1 00000000                 IMPORT           OS_Tcb_CurP
    2 00000000                 IMPORT           OS_Tcb_HighRdyP
    3 00000000         ;IMPORT   OSTaskSwHook
    4 00000000         
    5 00000000         ;EXPORT    OS_ENTER_CRITICAL
    6 00000000         ;EXPORT    OS_EXIT_CRITICAL
    7 00000000                 EXPORT           OSStart
    8 00000000                 EXPORT           PendSV_Handler
    9 00000000                 EXPORT           OSCtxSw
   10 00000000                 EXPORT           OS_CPU_SR_Save
   11 00000000                 EXPORT           OS_CPU_SR_Restore
   12 00000000         
   13 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Address of NVIC I
                                                            nterruptions Contro
                                                            l Register
   14 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Enable PendSV
   15 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   16 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   17 00000000         
   18 00000000                 PRESERVE8                    ; align 8
   19 00000000         
   20 00000000                 AREA             |.text|, CODE, READONLY
   21 00000000                 THUMB
   22 00000000         
   23 00000000         
   24 00000000         OS_CPU_SR_Save
   25 00000000 F3EF 8010       MRS              R0, PRIMASK
   26 00000004 B672            CPSID            I
   27 00000006 4770            BX               LR
   28 00000008         
   29 00000008         OS_CPU_SR_Restore
   30 00000008 F380 8810       MSR              PRIMASK, R0
   31 0000000C 4770            BX               LR
   32 0000000E         
   33 0000000E         ;/******************OS_ENTER_CRITICAL************/
   34 0000000E         ;OS_ENTER_CRITICAL
   35 0000000E         ;    CPSID    I    ; Enable interruptions(Change Process
                       or States: Interrupts Disable)
   36 0000000E         ;    BX    LR    ; Return
   37 0000000E         
   38 0000000E         ;/******************OS_EXIT_CRITICAL************/
   39 0000000E         ;OS_EXIT_CRITICAL
   40 0000000E         ;    CPSIE    I    ; Disable interruptions
   41 0000000E         ;    BX    LR     ; Return
   42 0000000E         
   43 0000000E         ;/******************OSStart************/
   44 0000000E         OSStart
   45 0000000E         ; disable interruptions



ARM Macro Assembler    Page 2 


   46 0000000E B672            CPSID            I           ; OS_ENTER_CRITICAL
                                                            ();
   47 00000010         ; initialize PendSV
   48 00000010         ; Set the PendSV exception priority
   49 00000010 4831            LDR              R0, =NVIC_SYSPRI14 ; R0 = NVIC_
                                                            SYSPRI14;
   50 00000012 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI ; R1 = NVI
                                                            C_PENDSV_PRI;
   51 00000016 7001            STRB             R1, [R0]    ; *R0 = R1;
   52 00000018         
   53 00000018         ; initialize PSP as 0
   54 00000018         ; MOV    R4, #0
   55 00000018 F04F 0400       LDR              R4,  =0x0   ; R4 = 0;
   56 0000001C F384 8809       MSR              PSP, R4     ; PSP = R4;
   57 00000020         
   58 00000020         ; trigger PendSV
   59 00000020 4C2E            LDR              R4, =NVIC_INT_CTRL ; R4 = NVIC_
                                                            INT_CTRL;
   60 00000022 F04F 5580       LDR              R5, =NVIC_PENDSVSET ; R5 = NVIC
                                                            _PENDSVSET;
   61 00000026 6025            STR              R5, [R4]    ; *R4 = R5;
   62 00000028         
   63 00000028         ; enable interruptions
   64 00000028 B662            CPSIE            I           ; OS_EXIT_CRITICAL(
                                                            );
   65 0000002A         
   66 0000002A         ; should never get here
   67 0000002A         ; a endless loop
   68 0000002A         OSStartHang
   69 0000002A E7FE            B                OSStartHang
   70 0000002C         
   71 0000002C         ;/******************PendSV_Handler************/
   72 0000002C         PendSV_Handler
   73 0000002C B672            CPSID            I           ; OS_ENTER_CRITICAL
                                                            ();
   74 0000002E         ; judge if PSP is 0 which means the task is first invoke
                       d
   75 0000002E F3EF 8009       MRS              R0, PSP     ; R0 = PSP;
   76 00000032 B310            CBZ              R0, PendSV_Handler_NoSave ; if(
                                                            R0 == 0) goto PendS
                                                            V_Handler_NoSave;
   77 00000034         ;-------------------------------------------------------
                       ----------------------------------    
   78 00000034         ;     R12, R3, R2, R1
   79 00000034 F1A0 0020       SUB              R0, R0, #0x20 ; R0 = R0 - 0x20;
                                                            
   80 00000038         
   81 00000038         ; store R4 
   82 00000038 6004            STR              R4 , [R0]   ; *R0 = R4;
   83 0000003A F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;
   84 0000003E         ; store R5 
   85 0000003E 6005            STR              R5 , [R0]   ; *R0 = R5;
   86 00000040 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;
   87 00000044         ; store R6 
   88 00000044 6006            STR              R6 , [R0]   ; *R0 = R6;
   89 00000046 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;
   90 0000004A         ; store R7 
   91 0000004A 6007            STR              R7 , [R0]   ; *R0 = R7;
   92 0000004C F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;



ARM Macro Assembler    Page 3 


   93 00000050         ; store R8 
   94 00000050 F8C0 8000       STR              R8 , [R0]   ; *R0 = R8;
   95 00000054 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;
   96 00000058         ; store R9
   97 00000058 F8C0 9000       STR              R9, [R0]    ; *R0 = R4;
   98 0000005C F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;
   99 00000060         ; store R10 
  100 00000060 F8C0 A000       STR              R10, [R0]   ; *R0 = R10;
  101 00000064 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;
  102 00000068         ; store R11 
  103 00000068 F8C0 B000       STR              R11, [R0]   ; *R0 = R11;
  104 0000006C F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;
  105 00000070         
  106 00000070 F1A0 0020       SUB              R0, R0, #0x20 ; R0 = R0 - 0x20;
                                                            
  107 00000074         
  108 00000074         ; easy method
  109 00000074         ;SUB     R0, R0, #0x20
  110 00000074         ;STM     R0, {R4-R11}
  111 00000074         ;-------------------------------------------------------
                       ---------------------------    
  112 00000074 491A            LDR              R1, =OS_Tcb_CurP 
                                                            ; R1 = OSTCBCur;
  113 00000076 6809            LDR              R1, [R1]    ; R1 = *R1;(R1 = OS
                                                            TCBCur->OSTCBStkPtr
                                                            )
  114 00000078 6008            STR              R0, [R1]    ; *R1 = R0;(*(OSTCB
                                                            Cur->OSTCBStkPrt) =
                                                             R0)
  115 0000007A         
  116 0000007A         PendSV_Handler_NoSave
  117 0000007A         ;PUSH    {R14}                          ; LR??,?????C??
  118 0000007A         ;LDR     R0, =OSTaskSwHook              ; ??OSTaskSwHook
                       ();
  119 0000007A         ;BLX     R0
  120 0000007A         ;POP     {R14}
  121 0000007A         
  122 0000007A 4819            LDR              R0, =OS_Tcb_CurP 
                                                            ; R0 = OSTCBCur;
  123 0000007C 4919            LDR              R1, =OS_Tcb_HighRdyP 
                                                            ; R1 = OSTCBNext;
  124 0000007E 680A            LDR              R2, [R1]    ; R2 = OSTCBNext->O
                                                            STCBStkPtr;
  125 00000080 6002            STR              R2, [R0]    ; *R0 = R2;(OSTCBCu
                                                            r->OSTCBStkPtr = OS
                                                            TCBNext->OSTCBStkPt
                                                            r)
  126 00000082         
  127 00000082 6810            LDR              R0, [R2]    ; R0 = *R2;(R0 = OS
                                                            TCBNext->OSTCBStkPt
                                                            r)
  128 00000084         ; LDM     R0, {R4-R11}
  129 00000084         ; load R4 
  130 00000084 6804            LDR              R4, [R0]    ; R4 = *R0;(R4 = *(
                                                            OSTCBNext->OSTCBStk
                                                            Ptr))
  131 00000086 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;(O
                                                            STCBNext->OSTCBStkP
                                                            tr++)



ARM Macro Assembler    Page 4 


  132 0000008A         ; load R5 
  133 0000008A 6805            LDR              R5, [R0]    ; R5 = *R0;(R5 = *(
                                                            OSTCBNext->OSTCBStk
                                                            Ptr))
  134 0000008C F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;(O
                                                            STCBNext->OSTCBStkP
                                                            tr++)
  135 00000090         ; load R6
  136 00000090 6806            LDR              R6, [R0]    ; R6 = *R0;(R6 = *(
                                                            OSTCBNext->OSTCBStk
                                                            Ptr))
  137 00000092 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;(O
                                                            STCBNext->OSTCBStkP
                                                            tr++)
  138 00000096         ; load R7 
  139 00000096 6807            LDR              R7 , [R0]   ; R7 = *R0;(R7 = *(
                                                            OSTCBNext->OSTCBStk
                                                            Ptr))
  140 00000098 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;(O
                                                            STCBNext->OSTCBStkP
                                                            tr++)
  141 0000009C         ; load R8 
  142 0000009C F8D0 8000       LDR              R8 , [R0]   ; R8 = *R0;(R8 = *(
                                                            OSTCBNext->OSTCBStk
                                                            Ptr))
  143 000000A0 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;(O
                                                            STCBNext->OSTCBStkP
                                                            tr++)
  144 000000A4         ; load R9 
  145 000000A4 F8D0 9000       LDR              R9 , [R0]   ; R9 = *R0;(R9 = *(
                                                            OSTCBNext->OSTCBStk
                                                            Ptr))
  146 000000A8 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;(O
                                                            STCBNext->OSTCBStkP
                                                            tr++)
  147 000000AC         ; load R10 
  148 000000AC F8D0 A000       LDR              R10 , [R0]  ; R10 = *R0;(R10 = 
                                                            *(OSTCBNext->OSTCBS
                                                            tkPtr))
  149 000000B0 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;(O
                                                            STCBNext->OSTCBStkP
                                                            tr++)
  150 000000B4         ; load R11 
  151 000000B4 F8D0 B000       LDR              R11 , [R0]  ; R11 = *R0;(R11 = 
                                                            *(OSTCBNext->OSTCBS
                                                            tkPtr))
  152 000000B8 F100 0004       ADD              R0, R0, #0x4 ; R0 = R0 + 0x4;(O
                                                            STCBNext->OSTCBStkP
                                                            tr++)
  153 000000BC         
  154 000000BC F380 8809       MSR              PSP, R0     ; PSP = R0;(PSP = O
                                                            STCBNext->OSTCBStkP
                                                            tr)
  155 000000C0         ; P42
  156 000000C0         ; P139 (key word: EXC_RETURN)
  157 000000C0         ; use PSP
  158 000000C0 F04E 0E04       ORR              LR, LR, #0x04 ; LR = LR | 0x04;
                                                            
  159 000000C4 B662            CPSIE            I           ; OS_EXIT_CRITICAL(



ARM Macro Assembler    Page 5 


                                                            );
  160 000000C6 4770            BX               LR          ; return;
  161 000000C8         
  162 000000C8         OSCtxSw                              ;OS context switch
  163 000000C8 B430            PUSH             {R4, R5}
  164 000000CA 4C04            LDR              R4, =NVIC_INT_CTRL ; R4 = NVIC_
                                                            INT_CTRL
  165 000000CC F04F 5580       LDR              R5, =NVIC_PENDSVSET ; R5 = NVIC
                                                            _PENDSVSET
  166 000000D0 6025            STR              R5, [R4]    ; *R4 = R5
  167 000000D2 BC30            POP              {R4, R5}
  168 000000D4 4770            BX               LR          ; return;
  169 000000D6         
  170 000000D6 00 00           align            4
  171 000000D8                 end
              E000ED22 
              E000ED04 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -IE:\STM32_X\Project\R
TE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -IC:\Keil_v5\A
RM\CMSIS\Include --predefine="__UVISION_VERSION SETA 515" --predefine="STM32F10
X_MD SETA 1" --list=.\listings\os_cpu_a.lst ..\os\ebox_os\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 20 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 000000C8

Symbol: OSCtxSw
   Definitions
      At line 162 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 9 in file ..\os\ebox_os\os_cpu_a.asm
Comment: OSCtxSw used once
OSStart 0000000E

Symbol: OSStart
   Definitions
      At line 44 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 7 in file ..\os\ebox_os\os_cpu_a.asm
Comment: OSStart used once
OSStartHang 0000002A

Symbol: OSStartHang
   Definitions
      At line 68 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 69 in file ..\os\ebox_os\os_cpu_a.asm
Comment: OSStartHang used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 29 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 11 in file ..\os\ebox_os\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 24 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 10 in file ..\os\ebox_os\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 0000002C

Symbol: PendSV_Handler
   Definitions
      At line 72 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 8 in file ..\os\ebox_os\os_cpu_a.asm
Comment: PendSV_Handler used once
PendSV_Handler_NoSave 0000007A

Symbol: PendSV_Handler_NoSave



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 116 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 76 in file ..\os\ebox_os\os_cpu_a.asm
Comment: PendSV_Handler_NoSave used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 13 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 59 in file ..\os\ebox_os\os_cpu_a.asm
      At line 164 in file ..\os\ebox_os\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 14 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 60 in file ..\os\ebox_os\os_cpu_a.asm
      At line 165 in file ..\os\ebox_os\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 16 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 50 in file ..\os\ebox_os\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 15 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 49 in file ..\os\ebox_os\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_Tcb_CurP 00000000

Symbol: OS_Tcb_CurP
   Definitions
      At line 1 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 112 in file ..\os\ebox_os\os_cpu_a.asm
      At line 122 in file ..\os\ebox_os\os_cpu_a.asm

OS_Tcb_HighRdyP 00000000

Symbol: OS_Tcb_HighRdyP
   Definitions
      At line 2 in file ..\os\ebox_os\os_cpu_a.asm
   Uses
      At line 123 in file ..\os\ebox_os\os_cpu_a.asm
Comment: OS_Tcb_HighRdyP used once
2 symbols
348 symbols in table
